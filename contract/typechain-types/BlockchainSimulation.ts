/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BlockchainSimulationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTransaction"
      | "chain"
      | "difficulty"
      | "getChainLength"
      | "mineBlock"
      | "validateChain"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTransaction",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "chain", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "difficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mineBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateChain",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "difficulty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mineBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateChain",
    data: BytesLike
  ): Result;
}

export interface BlockchainSimulation extends BaseContract {
  connect(runner?: ContractRunner | null): BlockchainSimulation;
  waitForDeployment(): Promise<this>;

  interface: BlockchainSimulationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTransaction: TypedContractMethod<
    [_transaction: string],
    [void],
    "nonpayable"
  >;

  chain: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, bigint] & {
        index: bigint;
        timestamp: bigint;
        previousHash: string;
        hash: string;
        nonce: bigint;
      }
    ],
    "view"
  >;

  difficulty: TypedContractMethod<[], [bigint], "view">;

  getChainLength: TypedContractMethod<[], [bigint], "view">;

  mineBlock: TypedContractMethod<[], [void], "nonpayable">;

  validateChain: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTransaction"
  ): TypedContractMethod<[_transaction: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "chain"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, bigint] & {
        index: bigint;
        timestamp: bigint;
        previousHash: string;
        hash: string;
        nonce: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "difficulty"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getChainLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mineBlock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateChain"
  ): TypedContractMethod<[], [boolean], "view">;

  filters: {};
}
